interfaces:
- name: ControlRegisters
  signals:
  - {name: scu_instr_retired,           access: "w"}
  - {name: f_scu_op, range: [3,0],      access: "w"}
  - {name: f_scu_result, range: [31,0], access: "r"}
  - {name: f_scu_mtvec, range: [31,0], access: "r"}
  - {name: f_scu_mepc , range: [31,0], access: "r"}

- name: RegisterFile
  signals:
  - {name: s_rs1_en,                    access: "w"} 
  - {name: s_rs1_addr,  range: [4, 0],  access: "w"}
  - {name: s_rs1_rdata, range: [31, 0], access: "r" }
  - {name: s_rs2_en,                    access: "w"}
  - {name: s_rs2_addr,  range: [4, 0],  access: "w"}
  - {name: s_rs2_rdata, range: [31, 0], access: "r" }
  - {name: d_rd_wen,                    access: "w"}
  - {name: d_rd_addr,   range: [4, 0],  access: "w"}
  - {name: d_rd_wdata,  range: [31, 0], access: "w"}

- name: ExternalMemory
  signals:
  - {name: mem_addr,    range: [31, 0], access: "w"} 
  - {name: mem_rdata,   range: [31, 0], access: "r"} 
  - {name: mem_wdata,   range: [31, 0], access: "w" } 
  - {name: mem_c_en,                    access: "w"} 
  - {name: mem_b_en,    range: [3 , 0], access: "w"} 
  - {name: mem_error,                   access: "r" } 
  - {name: mem_stall,                   access: "r" } 

- name: InstructionDecoder
  signals:
  - {name: ctrl_illegal_instr, access: "r" }
  - {name: ctrl_fdu_mem_valid, access: "w"}
  - {name: i_rs1_addr        , range: [4,0], access: "r" }
  - {name: i_rs2_addr        , range: [4,0], access: "r" }
  - {name: i_rd_addr         , range: [4,0], access: "r" }
  - {name: i_immediate       , range: [31,0],access: "r" }
  - {name: i_instr           , range: [5,0], access: "r" }

- name: ProgramCounter
  signals:
  - { range: [31,0], name: s_pc, access: "r"}
  - { range: [31,0], name: d_pc_wdata, access: "w"}
  - { range: [0,0] , name: d_pc_w_en, access: "w"}

- name: Adder
  signals:
  - { range: [31,0], name: f_add_lhs   , access: "w"}
  - { range: [31,0], name: f_add_rhs   , access: "w"}
  - { range: [ 1,0], name: f_add_op    , access: "w"}
  - {                name: f_add_valid , access: "r" }
  - { range: [32,0], name: f_add_result, access: "r" }

- name: Shifter
  signals:
  - { range: [31,0], name: f_shf_lhs   , access: "w"}
  - { range: [ 4,0], name: f_shf_rhs   , access: "w"}
  - { range: [ 1,0], name: f_shf_op    , access: "w"}
  - {                name: f_shf_valid , access: "r" }
  - { range: [31,0], name: f_shf_result, access: "r" }

- name: Bitwise
  signals:
  - { range: [31,0], name: f_bit_lhs   , access: "w"}
  - { range: [31,0], name: f_bit_rhs   , access: "w"}
  - { range: [ 1,0], name: f_bit_op    , access: "w"}
  - {                name: f_bit_valid , access: "r" }
  - { range: [31,0], name: f_bit_result, access: "r" }

states:
- name: Post-Reset
  wait: null
  next: InstructionFetch
  encoding: 0

- name: InstructionFetch
  wait: [mem_stall != 0]
  next: InstructionDecode
  set:
  - ExternalMemory:
    - mem_addr: s_pc
      mem_b_en: 4'hF
      mem_c_en: 1
  - InstructionDecoder:
    - ctrl_fdu_mem_valid: 1
  - ControlRegisters:
    - scu_instr_retired: 1

- name: InstructionDecode
  wait: null
  next: [
    {if: "i_instr == `RVM_INSTR_ADD"  , then: EX_Add},
    {if: "i_instr == `RVM_INSTR_ADDI"  , then: EX_ADDI},
    {if: "i_instr == `RVM_INSTR_ANDI" , then: EX_ANDI},
    {if: "i_instr == `RVM_INSTR_AUIPC" , then: EX_AUIPC},
    {if: "i_instr == `RVM_INSTR_BEQ"  , then: EX_BEQ},
    {if: "i_instr == `RVM_INSTR_BNE"  , then: EX_BNE},
    {if: "i_instr == `RVM_INSTR_BGE"  , then: EX_BGE},
    {if: "i_instr == `RVM_INSTR_CSRRC", then: EX_CSRRC},
    {if: "i_instr == `RVM_INSTR_CSRRCI", then: EX_CSRRCI},
    {if: "i_instr == `RVM_INSTR_CSRRS", then: EX_CSRRS},
    {if: "i_instr == `RVM_INSTR_CSRRSI", then: EX_CSRRSI},
    {if: "i_instr == `RVM_INSTR_CSRRW", then: EX_CSRRW},
    {if: "i_instr == `RVM_INSTR_CSRRWI", then: EX_CSRRWI},
    {if: "i_instr == `RVM_INSTR_JAL"  , then: EX_Jal_0},
    {if: "i_instr == `RVM_INSTR_MRET" , then: EX_MRET},
    {if: "i_instr == `RVM_INSTR_SUB"  , then: EX_Sub},
  ]

- name: EX_MRET
  notes: "Return from machine mode trap - set pc to mtvec."
  set:
  - ProgramCounter:
    - d_pc_w_en: 1
      d_pc_wdata: f_scu_mepc
  next: InstructionFetch


- name: EX_AUIPC
  notes: "Add immediate to upper 20 bits of program coutner."
  set:
  - RegisterFile:
    - d_rd_wen  : 1
      d_rd_addr : i_rd_addr
      d_rd_wdata: f_add_result
  - Adder:
    - f_add_lhs: s_pc
      f_add_rhs: i_immediate
      f_add_op: "`RVM_ARITH_ADD"
  next: IncrementProgramCounter

- name: EX_ANDI
  notes: "Bitwise AND with immediate"
  set:
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
      s_rs1_en  : 1
      d_rd_wen  : 1
      d_rd_addr : i_rd_addr
      d_rd_wdata: f_bit_result
  - Bitwise:
    - f_bit_lhs: s_rs1_rdata
      f_bit_rhs: i_immediate
      f_bit_op: "`RVM_BITWISE_AND"
  next: IncrementProgramCounter

- name: EX_BGE
  notes: "Branch on greater than or equal to"
  set:
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
      s_rs2_addr: i_rs2_addr
      s_rs1_en  : 1
      s_rs2_en  : 1
  - Adder:
    - f_add_lhs: s_rs1_rdata
      f_add_rhs: s_rs2_rdata
      f_add_op: "`RVM_ARITH_SUB"
  next: [
    {if: "!f_add_result[32] && ~|f_add_result[31:0]", 
     then: EX_COND_BRANCH_TAKEN},
    {if: "f_add_result[32]", then: IncrementProgramCounter}
  ]

- name: EX_BNE
  notes: "Branch on not equal"
  set:
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
      s_rs2_addr: i_rs2_addr
      s_rs1_en  : 1
      s_rs2_en  : 1
  - Adder:
    - f_add_lhs: s_rs1_rdata
      f_add_rhs: s_rs2_rdata
      f_add_op: "`RVM_ARITH_SUB"
  next: [
    {if: "~|f_add_result[31:0]", then: EX_COND_BRANCH_TAKEN},
    {if: "|f_add_result[31:0]", then: IncrementProgramCounter}
  ]

- name: EX_BEQ
  notes: "Branch on equal"
  set:
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
      s_rs2_addr: i_rs2_addr
      s_rs1_en  : 1
      s_rs2_en  : 1
  - Adder:
    - f_add_lhs: s_rs1_rdata
      f_add_rhs: s_rs2_rdata
      f_add_op: "`RVM_ARITH_SUB"
  next: [
    {if: "~|f_add_result[31:0]", then: EX_COND_BRANCH_TAKEN},
    {if: "|f_add_result[31:0]", then: IncrementProgramCounter}
  ]

- name: EX_COND_BRANCH_TAKEN
  notes: "Add the immediate to the program counter and fetch next instr."
  set:
  - Adder:
    - f_add_lhs: s_pc
    - f_add_rhs: i_immediate
    - f_add_op : "`RVM_ARITH_ADD"
  - ProgramCounter:
    - d_pc_w_en: 1
      d_pc_wdata: f_add_result
  next: InstructionFetch

- name: EX_CSRRWI
  set :
  - ControlRegisters:
    - f_scu_op: "`RVM_SCU_CSRRWI"
  - RegisterFile:
    - d_rd_wen:  1
    - d_rd_addr: i_rd_addr
    - d_rd_wdata: f_scu_result
  next: IncrementProgramCounter

- name: EX_CSRRCI
  set :
  - ControlRegisters:
    - f_scu_op: "`RVM_SCU_CSRRCI"
  - RegisterFile:
    - d_rd_wen:  1
    - d_rd_addr: i_rd_addr
    - d_rd_wdata: f_scu_result
  next: IncrementProgramCounter

- name: EX_CSRRSI
  set :
  - ControlRegisters:
    - f_scu_op: "`RVM_SCU_CSRRSI"
  - RegisterFile:
    - d_rd_wen:  1
    - d_rd_addr: i_rd_addr
    - d_rd_wdata: f_scu_result
  next: IncrementProgramCounter

- name: EX_CSRRW
  set :
  - ControlRegisters:
    - f_scu_op: "`RVM_SCU_CSRRW"
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
    - s_rs1_en: 1
    - d_rd_wen:  1
    - d_rd_addr: i_rd_addr
    - d_rd_wdata: f_scu_result
  next: IncrementProgramCounter

- name: EX_CSRRC
  set :
  - ControlRegisters:
    - f_scu_op: "`RVM_SCU_CSRRC"
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
    - s_rs1_en: 1
    - d_rd_wen:  1
    - d_rd_addr: i_rd_addr
    - d_rd_wdata: f_scu_result
  next: IncrementProgramCounter

- name: EX_CSRRS
  set :
  - ControlRegisters:
    - f_scu_op: "`RVM_SCU_CSRRS"
  - RegisterFile:
    - s_rs1_addr: i_rs1_addr
    - s_rs1_en: 1
    - d_rd_wen:  1
    - d_rd_addr: i_rd_addr
    - d_rd_wdata: f_scu_result
  next: IncrementProgramCounter

- name: EX_Add
  set :
    - Adder:
      - f_add_lhs: s_rs1_rdata
        f_add_rhs: s_rs2_rdata
        f_add_op : "`RVM_ARITH_ADD"
    - RegisterFile:
      - s_rs1_addr: i_rs1_addr
        s_rs2_addr: i_rs2_addr
        s_rs1_en : 1
        s_rs2_en : 1
        d_rd_wen:   1
        d_rd_addr:  i_rd_addr
        d_rd_wdata: f_add_result
  next: IncrementProgramCounter

- name: EX_ADDI
  set :
    - Adder:
      - f_add_lhs: s_rs1_rdata
        f_add_rhs: i_immediate
        f_add_op : "`RVM_ARITH_ADD"
    - RegisterFile:
      - s_rs1_addr: i_rs1_addr
        s_rs1_en : 1
        d_rd_wen:   1
        d_rd_addr:  i_rd_addr
        d_rd_wdata: f_add_result
  next: IncrementProgramCounter

- name: EX_Sub
  set :
    - Adder:
      - f_add_lhs: s_rs1_rdata
        f_add_rhs: s_rs2_rdata
        f_add_op : "`RVM_ARITH_SUB"
    - RegisterFile:
      - s_rs1_addr: i_rs1_addr
        s_rs2_addr: i_rs2_addr
        d_rd_wen:   1
        d_rd_addr:  i_rd_addr
        d_rd_wdata: f_add_result
  next: IncrementProgramCounter

- name: EX_Jal_0
  notes: "First state of executing JAL. Add 4 to the PC and store this in a
          register"
  set :
    - Adder:
      - f_add_lhs: s_pc
        f_add_rhs: "32'd4"
        f_add_op : "`RVM_ARITH_ADD"
    - RegisterFile:
      - d_rd_wen:   1
        d_rd_addr:  i_rd_addr
        d_rd_wdata: f_add_result
  next: EX_Jal_1

- name: EX_Jal_1
  notes: "Second state of executing JAL. Add the immediate to the PC and then
          fetch the next instruction."
  set :
    - Adder:
      - f_add_lhs: s_pc
        f_add_rhs: i_immediate
        f_add_op : "`RVM_ARITH_ADD"
    - ProgramCounter:
      - d_pc_w_en: 1
        d_pc_wdata: f_add_result
  next: InstructionFetch

- name: IncrementProgramCounter
  wait: null
  next: InstructionFetch
  set:
  - ProgramCounter:
    - d_pc_w_en: 1
      d_pc_wdata: f_add_result
  - Adder:
    - f_add_lhs: s_pc
      f_add_rhs: "32'd4"
      f_add_op : "`RVM_ARITH_ADD"



